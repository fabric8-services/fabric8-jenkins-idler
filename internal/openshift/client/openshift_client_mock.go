// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/openshift/client/openshift_client.go

// Package client is a generated GoMock package.
package client

import (
	model "github.com/fabric8-services/fabric8-jenkins-idler/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOpenShiftClient is a mock of OpenShiftClient interface
type MockOpenShiftClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClientMockRecorder
}

// MockOpenShiftClientMockRecorder is the mock recorder for MockOpenShiftClient
type MockOpenShiftClientMockRecorder struct {
	mock *MockOpenShiftClient
}

// NewMockOpenShiftClient creates a new mock instance
func NewMockOpenShiftClient(ctrl *gomock.Controller) *MockOpenShiftClient {
	mock := &MockOpenShiftClient{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftClient) EXPECT() *MockOpenShiftClientMockRecorder {
	return m.recorder
}

// Idle mocks base method
func (m *MockOpenShiftClient) Idle(apiURL, bearerToken, namespace, service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Idle", apiURL, bearerToken, namespace, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Idle indicates an expected call of Idle
func (mr *MockOpenShiftClientMockRecorder) Idle(apiURL, bearerToken, namespace, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Idle", reflect.TypeOf((*MockOpenShiftClient)(nil).Idle), apiURL, bearerToken, namespace, service)
}

// UnIdle mocks base method
func (m *MockOpenShiftClient) UnIdle(apiURL, bearerToken, namespace, service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnIdle", apiURL, bearerToken, namespace, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnIdle indicates an expected call of UnIdle
func (mr *MockOpenShiftClientMockRecorder) UnIdle(apiURL, bearerToken, namespace, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnIdle", reflect.TypeOf((*MockOpenShiftClient)(nil).UnIdle), apiURL, bearerToken, namespace, service)
}

// State mocks base method
func (m *MockOpenShiftClient) State(apiURL, bearerToken, namespace, service string) (model.PodState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", apiURL, bearerToken, namespace, service)
	ret0, _ := ret[0].(model.PodState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State
func (mr *MockOpenShiftClientMockRecorder) State(apiURL, bearerToken, namespace, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockOpenShiftClient)(nil).State), apiURL, bearerToken, namespace, service)
}

// WhoAmI mocks base method
func (m *MockOpenShiftClient) WhoAmI(apiURL, bearerToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI", apiURL, bearerToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhoAmI indicates an expected call of WhoAmI
func (mr *MockOpenShiftClientMockRecorder) WhoAmI(apiURL, bearerToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockOpenShiftClient)(nil).WhoAmI), apiURL, bearerToken)
}

// WatchBuilds mocks base method
func (m *MockOpenShiftClient) WatchBuilds(apiURL, bearerToken, buildType string, callback func(model.Object) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBuilds", apiURL, bearerToken, buildType, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchBuilds indicates an expected call of WatchBuilds
func (mr *MockOpenShiftClientMockRecorder) WatchBuilds(apiURL, bearerToken, buildType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBuilds", reflect.TypeOf((*MockOpenShiftClient)(nil).WatchBuilds), apiURL, bearerToken, buildType, callback)
}

// WatchDeploymentConfigs mocks base method
func (m *MockOpenShiftClient) WatchDeploymentConfigs(apiURL, bearerToken, namespaceSuffix string, callback func(model.DCObject) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchDeploymentConfigs", apiURL, bearerToken, namespaceSuffix, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchDeploymentConfigs indicates an expected call of WatchDeploymentConfigs
func (mr *MockOpenShiftClientMockRecorder) WatchDeploymentConfigs(apiURL, bearerToken, namespaceSuffix, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchDeploymentConfigs", reflect.TypeOf((*MockOpenShiftClient)(nil).WatchDeploymentConfigs), apiURL, bearerToken, namespaceSuffix, callback)
}

// Reset mocks base method
func (m *MockOpenShiftClient) Reset(apiURL, bearerToken, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", apiURL, bearerToken, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockOpenShiftClientMockRecorder) Reset(apiURL, bearerToken, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockOpenShiftClient)(nil).Reset), apiURL, bearerToken, namespace)
}
