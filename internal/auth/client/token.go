// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "auth": token Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// DeleteTokenPath computes a request path to the Delete action of token.
func DeleteTokenPath() string {

	return fmt.Sprintf("/api/token")
}

// Delete the external token for resources belonging to external providers like Github and OpenShift
func (c *Client) DeleteToken(ctx context.Context, path string, for_ string) (*http.Response, error) {
	req, err := c.NewDeleteTokenRequest(ctx, path, for_)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTokenRequest create the request corresponding to the Delete action endpoint of the token resource.
func (c *Client) NewDeleteTokenRequest(ctx context.Context, path string, for_ string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("for", for_)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ExchangeTokenPath computes a request path to the Exchange action of token.
func ExchangeTokenPath() string {

	return fmt.Sprintf("/api/token")
}

// Obtain a security token
func (c *Client) ExchangeToken(ctx context.Context, path string, payload *TokenExchange, contentType string) (*http.Response, error) {
	req, err := c.NewExchangeTokenRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewExchangeTokenRequest create the request corresponding to the Exchange action endpoint of the token resource.
func (c *Client) NewExchangeTokenRequest(ctx context.Context, path string, payload *TokenExchange, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// RetrieveTokenPath computes a request path to the Retrieve action of token.
func RetrieveTokenPath() string {

	return fmt.Sprintf("/api/token")
}

// Get the external token for resources belonging to external providers like Github and OpenShift. If the token is missing or not valid then 401 Unauthorized status with 'WWW-Authenticate: LINK url=<url>, description=<error_description>' header will be returned. For example: 'WWW-Authenticate: LINK url=https://auth.openshift.io/api/token/link?for=https://github.com, description="GitHub token is missing. Link GitHub account"'
func (c *Client) RetrieveToken(ctx context.Context, path string, for_ string, forcePull *bool) (*http.Response, error) {
	req, err := c.NewRetrieveTokenRequest(ctx, path, for_, forcePull)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRetrieveTokenRequest create the request corresponding to the Retrieve action endpoint of the token resource.
func (c *Client) NewRetrieveTokenRequest(ctx context.Context, path string, for_ string, forcePull *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("for", for_)
	if forcePull != nil {
		tmp57 := strconv.FormatBool(*forcePull)
		values.Set("force_pull", tmp57)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// StatusTokenPath computes a request path to the Status action of token.
func StatusTokenPath() string {

	return fmt.Sprintf("/api/token/status")
}

// Check if the external token is available. Returns 200 OK if the token is available and 401 Unauthorized if no token available
func (c *Client) StatusToken(ctx context.Context, path string, for_ string, forcePull *bool) (*http.Response, error) {
	req, err := c.NewStatusTokenRequest(ctx, path, for_, forcePull)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewStatusTokenRequest create the request corresponding to the Status action endpoint of the token resource.
func (c *Client) NewStatusTokenRequest(ctx context.Context, path string, for_ string, forcePull *bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("for", for_)
	if forcePull != nil {
		tmp58 := strconv.FormatBool(*forcePull)
		values.Set("force_pull", tmp58)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// AuditTokenPath computes a request path to the audit action of token.
func AuditTokenPath() string {

	return fmt.Sprintf("/api/token/audit")
}

// Verifies the state of an existing token in respect to its privileges for a specified resource, and issues a new token if required
func (c *Client) AuditToken(ctx context.Context, path string, resourceID string) (*http.Response, error) {
	req, err := c.NewAuditTokenRequest(ctx, path, resourceID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAuditTokenRequest create the request corresponding to the audit action endpoint of the token resource.
func (c *Client) NewAuditTokenRequest(ctx context.Context, path string, resourceID string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("resource_id", resourceID)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// CallbackTokenPath computes a request path to the callback action of token.
func CallbackTokenPath() string {

	return fmt.Sprintf("/api/token/link/callback")
}

// Callback from an external oauth2 resource provider such as GitHub as part of user's account linking
func (c *Client) CallbackToken(ctx context.Context, path string, code string, state string) (*http.Response, error) {
	req, err := c.NewCallbackTokenRequest(ctx, path, code, state)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCallbackTokenRequest create the request corresponding to the callback action endpoint of the token resource.
func (c *Client) NewCallbackTokenRequest(ctx context.Context, path string, code string, state string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("code", code)
	values.Set("state", state)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GenerateTokenPath computes a request path to the generate action of token.
func GenerateTokenPath() string {

	return fmt.Sprintf("/api/token/generate")
}

// Generate a set of Tokens for different Auth levels. NOT FOR PRODUCTION. Only available if server is running in dev mode
func (c *Client) GenerateToken(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGenerateTokenRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGenerateTokenRequest create the request corresponding to the generate action endpoint of the token resource.
func (c *Client) NewGenerateTokenRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// KeysTokenPath computes a request path to the keys action of token.
func KeysTokenPath() string {

	return fmt.Sprintf("/api/token/keys")
}

// Returns public keys which should be used to verify tokens
func (c *Client) KeysToken(ctx context.Context, path string, format *string) (*http.Response, error) {
	req, err := c.NewKeysTokenRequest(ctx, path, format)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewKeysTokenRequest create the request corresponding to the keys action endpoint of the token resource.
func (c *Client) NewKeysTokenRequest(ctx context.Context, path string, format *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if format != nil {
		values.Set("format", *format)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LinkTokenPath computes a request path to the link action of token.
func LinkTokenPath() string {

	return fmt.Sprintf("/api/token/link")
}

// Get a redirect location which should be used to initiate account linking between the user account and an external resource provider such as GitHub
func (c *Client) LinkToken(ctx context.Context, path string, for_ string, redirect *string) (*http.Response, error) {
	req, err := c.NewLinkTokenRequest(ctx, path, for_, redirect)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLinkTokenRequest create the request corresponding to the link action endpoint of the token resource.
func (c *Client) NewLinkTokenRequest(ctx context.Context, path string, for_ string, redirect *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("for", for_)
	if redirect != nil {
		values.Set("redirect", *redirect)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// RefreshTokenPath computes a request path to the refresh action of token.
func RefreshTokenPath() string {

	return fmt.Sprintf("/api/token/refresh")
}

// Refresh access token
func (c *Client) RefreshToken(ctx context.Context, path string, payload *RefreshToken, contentType string) (*http.Response, error) {
	req, err := c.NewRefreshTokenRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRefreshTokenRequest create the request corresponding to the refresh action endpoint of the token resource.
func (c *Client) NewRefreshTokenRequest(ctx context.Context, path string, payload *RefreshToken, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
