// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "auth": invitation Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AcceptInviteInvitationPath computes a request path to the acceptInvite action of invitation.
func AcceptInviteInvitationPath(acceptCode string) string {
	param0 := acceptCode

	return fmt.Sprintf("/api/invitations/accept/%s", param0)
}

// AcceptInviteInvitation makes a request to the acceptInvite action endpoint of the invitation resource
func (c *Client) AcceptInviteInvitation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewAcceptInviteInvitationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAcceptInviteInvitationRequest create the request corresponding to the acceptInvite action endpoint of the invitation resource.
func (c *Client) NewAcceptInviteInvitationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateInviteInvitationPayload is the invitation createInvite action payload.
type CreateInviteInvitationPayload struct {
	// An array of users invited to become members or to accept a role
	Data []*Invitee `form:"data" json:"data" xml:"data"`
	// links to redirect after accepting invitation sucessfully or in case of error
	Links *RedirectURL `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// CreateInviteInvitationPath computes a request path to the createInvite action of invitation.
func CreateInviteInvitationPath(inviteTo string) string {
	param0 := inviteTo

	return fmt.Sprintf("/api/invitations/%s", param0)
}

// Create a new invitation for a user to join an organization, team or security group, or accept a role for a resource
func (c *Client) CreateInviteInvitation(ctx context.Context, path string, payload *CreateInviteInvitationPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateInviteInvitationRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateInviteInvitationRequest create the request corresponding to the createInvite action endpoint of the invitation resource.
func (c *Client) NewCreateInviteInvitationRequest(ctx context.Context, path string, payload *CreateInviteInvitationPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// RescindInviteInvitationPath computes a request path to the rescindInvite action of invitation.
func RescindInviteInvitationPath(inviteTo string) string {
	param0 := inviteTo

	return fmt.Sprintf("/api/invitations/%s", param0)
}

// RescindInviteInvitation makes a request to the rescindInvite action endpoint of the invitation resource
func (c *Client) RescindInviteInvitation(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewRescindInviteInvitationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRescindInviteInvitationRequest create the request corresponding to the rescindInvite action endpoint of the invitation resource.
func (c *Client) NewRescindInviteInvitationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
