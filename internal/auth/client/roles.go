// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "auth": roles Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListRolesPath computes a request path to the list action of roles.
func ListRolesPath() string {

	return fmt.Sprintf("/api/roles")
}

// List available roles by resource type
func (c *Client) ListRoles(ctx context.Context, path string, resourceType *string) (*http.Response, error) {
	req, err := c.NewListRolesRequest(ctx, path, resourceType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListRolesRequest create the request corresponding to the list action endpoint of the roles resource.
func (c *Client) NewListRolesRequest(ctx context.Context, path string, resourceType *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if resourceType != nil {
		values.Set("resource_type", *resourceType)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
