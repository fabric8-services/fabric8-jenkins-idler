// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "auth": space Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateSpacePath computes a request path to the create action of space.
func CreateSpacePath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s", param0)
}

// Create a space resource for the giving space
func (c *Client) CreateSpace(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCreateSpaceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateSpaceRequest create the request corresponding to the create action endpoint of the space resource.
func (c *Client) NewCreateSpaceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteSpacePath computes a request path to the delete action of space.
func DeleteSpacePath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s", param0)
}

// Delete a space resource for the given space ID
func (c *Client) DeleteSpace(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteSpaceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteSpaceRequest create the request corresponding to the delete action endpoint of the space resource.
func (c *Client) NewDeleteSpaceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListTeamsSpacePath computes a request path to the listTeams action of space.
func ListTeamsSpacePath(spaceID string) string {
	param0 := spaceID

	return fmt.Sprintf("/api/spaces/%s/teams", param0)
}

// Lists teams for the specified space
func (c *Client) ListTeamsSpace(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTeamsSpaceRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTeamsSpaceRequest create the request corresponding to the listTeams action endpoint of the space resource.
func (c *Client) NewListTeamsSpaceRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
