// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "auth": team Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-auth/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-auth
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateTeamPayload is the team create action payload.
type CreateTeamPayload struct {
	// The name of the new team
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// The identifier of the space in which to create the team
	SpaceID *string `form:"space_id,omitempty" json:"space_id,omitempty" xml:"space_id,omitempty"`
}

// CreateTeamPath computes a request path to the create action of team.
func CreateTeamPath() string {

	return fmt.Sprintf("/api/teams")
}

// Create a new team
func (c *Client) CreateTeam(ctx context.Context, path string, payload *CreateTeamPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateTeamRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTeamRequest create the request corresponding to the create action endpoint of the team resource.
func (c *Client) NewCreateTeamRequest(ctx context.Context, path string, payload *CreateTeamPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListTeamPath computes a request path to the list action of team.
func ListTeamPath() string {

	return fmt.Sprintf("/api/teams")
}

// Lists teams that the user has access to
func (c *Client) ListTeam(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTeamRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTeamRequest create the request corresponding to the list action endpoint of the team resource.
func (c *Client) NewListTeamRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
